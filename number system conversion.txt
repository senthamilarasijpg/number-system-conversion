//write your code here..
#include<stdio.h> 
#include <stdlib.h> 
#include <string.h> 

  

void strrev(char*); 

  
// Function to convert decimal to binary and return as a 
// string 

char* decimalToBinary(int decimal) 
{ 

    // Allocate space for a 32-bit binary string + '\0' 

    char* binary = (char*)malloc(33); 

  

    int i = 0; 

    // converting to binary 

    while (decimal) { 

        binary[i++] = '0' + (decimal & 1); 

        decimal >>= 1; 

    } 

    binary[i] = '\0'; 

    strrev(binary); 

    return binary; 
} 
// Function to convert binary to decimal and return as an 
    // it's a multiple of 4 

    int length = strlen(binary); 

    int padding = (4 - (length % 4)) % 4; 

    char paddedBinary[129]; 

    memset(paddedBinary, '0', padding); 

    strcpy(paddedBinary + padding, binary); 

    // Define a mapping of binary strings to their 

    // hexadecimal representations 

    char* binaryHexDigits[] 

        = { "0000", "0001", "0010", "0011", "0100", "0101", 

            "0110", "0111", "1000", "1001", "1010", "1011", 

            "1100", "1101", "1110", "1111" }; 

    char hexadecimal[33] = ""; // Allocate space for an 

                               // 8-digit hexadecimal string 

    // Iterate through groups of 4 binary digits and convert 

    // to hexadecimal 

    for (int i = 0; i < length + padding; i += 4) { 

        char group[5]; 

        strncpy(group, paddedBinary + i, 4); 

        group[4] = '\0'; 
        // Find the corresponding hexadecimal digit 
            printf("Enter a binary number: "); 

            scanf("%s", input); 

            result = binaryToHexadecimal(input); 

            printf("Binary to Hexadecimal: %s\n", result); 

            free(result); 

            break; 

        default: 

            printf("Invalid choice. Please enter a valid "

                   "option.\n"); 

        } 

    } 

  

    return 0; 
} 

  
// reversing string 

void strrev(char* str) 
{ 

    int i = 0; 

    int j = strlen(str) - 1; 

    while (i < j) { 

        char c = str[i]; 

        str[i] = str[j]; 

        str[j] = c; 

        i++; 

        j--; 

    } 
}